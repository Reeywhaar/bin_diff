
running 1 test
test diff::combine_diffs_tests::works_live_test ... FAILED

failures:

---- diff::combine_diffs_tests::works_live_test stdout ----
diffs
Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 0 }
Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 0 }
0
2
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 6 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 6 } } }
actions Some(DiffBlock::Skip { size: 59 }) Some(DiffBlock::Remove { size: 11 })
diffed  Some(DiffBlock::Remove { size: 11 }) Some(DiffBlock::Skip { size: 48 }) None
output Cursor { inner: [0, 2, 0, 0, 0, b], pos: 6 }

0
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 6 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: c } } }
actions Some(DiffBlock::Skip { size: 48 }) Some(DiffBlock::Skip { size: 65 })
diffed  Some(DiffBlock::Skip { size: 48 }) None Some(DiffBlock::Skip { size: 17 })
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30], pos: c }

1
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: c } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: c } } }
actions Some(DiffBlock::Add { size: 17 }) Some(DiffBlock::Skip { size: 17 })
diffed  Some(DiffBlock::Add { size: 17 }) None None
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a], pos: 23 }

0
1
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 23 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 12 } } }
actions Some(DiffBlock::Skip { size: 22 }) Some(DiffBlock::Add { size: 15 })
diffed  Some(DiffBlock::Add { size: 15 }) Some(DiffBlock::Skip { size: 22 }) None
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a], pos: 38 }

0
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 23 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 27 } } }
actions Some(DiffBlock::Skip { size: 22 }) Some(DiffBlock::Skip { size: 22 })
diffed  Some(DiffBlock::Skip { size: 22 }) None None
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16], pos: 3e }

4
2
diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 29 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 2d } } }
actions Some(DiffBlock::ReplaceWithSameLength { size: 27 }) Some(DiffBlock::Remove { size: 27 })
diffed  Some(DiffBlock::Remove { size: 27 }) Some(DiffBlock::Add { size: 27 }) Some(DiffBlock::Remove { size: 27 })
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b], pos: 44 }

diffs
ClonableRead { v: Mutex { data: Cursor { inner: [0, 0, 0, 0, 0, 3b, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 1b, 63, 6f, 73, 20, 69, 20, 68, 65, 61, 72, 64, 20, 73, 68, 65, 73, 20, 62, 65, 65, 6e, 20, 77, 6f, 72, 6e, a, 0, 0, 0, 0, 0, 24], pos: 29 } } }
ClonableRead { v: Mutex { data: Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b, 0, 0, 0, 0, 0, 24], pos: 2d } } }
actions Some(DiffBlock::Add { size: 27 }) Some(DiffBlock::Remove { size: 27 })
diffed  None None None
output Cursor { inner: [0, 2, 0, 0, 0, b, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 11, 69, 20, 73, 65, 65, 20, 79, 6f, 75, 72, 20, 6d, 6f, 76, 65, 73, a, 0, 1, 0, 0, 0, f, 73, 6f, 20, 69, 20, 68, 61, 76, 65, 20, 73, 65, 65, 6e, a, 0, 0, 0, 0, 0, 16, 0, 2, 0, 0, 0, 1b], pos: 44 }

636f
thread 'diff::combine_diffs_tests::works_live_test' panicked at 'Unknown Action', src/diff.rs:568:8
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    diff::combine_diffs_tests::works_live_test

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 15 filtered out

